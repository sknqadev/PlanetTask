name: Online Banking CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Simulated build step
        run: echo "ðŸ§± Build step placeholder"

      - name: Set up JDK 23
        uses: actions/setup-java@v3
        with:
          java-version: '23'
          distribution: 'temurin'
          cache: maven

      - name: Build and upload mock-server
        run: mvn clean package -pl mock-server -am -DskipTests=true
      - name: Upload mock-server JAR
        uses: actions/upload-artifact@v4
        with:
          name: mock-server-jar
          path: mock-server/target/mock-server-1.0-SNAPSHOT-jar-with-dependencies.jar

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run unit tests
        run: echo "âœ… Unit tests passed"

  integration-tests:
    name: Integration Tests (API)
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v3
        with:
          java-version: '23'
          distribution: 'temurin'
          cache: maven

      - name: Download mock-server JAR
        uses: actions/download-artifact@v4
        with:
          name: mock-server-jar
          path: mock-server/target

      - name: Start mock-server
        run: |
          echo "ðŸš€ Starting mock-server..."
          java -jar mock-server/target/mock-server-1.0-SNAPSHOT-jar-with-dependencies.jar &
          echo $! > mock_pid
          sleep 3

      - name: Run API integration tests
        run: |
          cd api-tests || exit 1
          mvn clean test -D allure.results.directory=../test-results/Allure
          cd ..

      - name: Stop mock-server
        if: always()
        run: |
          echo "ðŸ›‘ Stopping mock-server..."
          kill $(cat mock_pid) || true

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run performance tests
        run: echo "ðŸš€ Performance tests passed"

  e2e-tests:
    name: End-to-End Tests (UI)
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: 'ui-tests/package-lock.json'

      - name: Install UI dependencies
        run: |
          cd ui-tests
          npm ci
          npx playwright install

      - name: Download mock-server JAR
        uses: actions/download-artifact@v4
        with:
          name: mock-server-jar
          path: mock-server/target

      - name: Start mock-server
        run: |
          echo "ðŸš€ Starting mock-server..."
          java -jar mock-server/target/mock-server-1.0-SNAPSHOT-jar-with-dependencies.jar &
          echo $! > mock_pid
          sleep 3

      - name: Run Playwright UI tests
        run: |
          cd ui-tests
          npx playwright test
          cd ..

      - name: Archive Allure results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results
          path: /test-results/allure-results

      - name: Stop mock-server
        if: always()
        run: |
          echo "ðŸ›‘ Stopping mock-server..."
          kill $(cat mock_pid) || true

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, e2e-tests]
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Deploy application to Production
        run: echo "ðŸš€ Production deployment completed"
