name: Online Banking CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Simulated build step
        run: echo "ðŸ§± Build step placeholder"

      - name: Set up JDK 23
        uses: actions/setup-java@v3
        with:
          java-version: '23'
          distribution: 'temurin'
          cache: maven

      - name: Build and upload mock-server
        run: mvn clean package -pl mock-server -am -DskipTests=true
      - name: Upload mock-server JAR
        uses: actions/upload-artifact@v4
        with:
          name: mock-server-jar
          path: mock-server/target/mock-server-1.0-SNAPSHOT-jar-with-dependencies.jar
  stage:
    name: Stage to QA
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Stage deployment Completed
        run: echo "Stage deployment completed"
  tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: stage
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '23'
          distribution: 'temurin'
          cache: maven

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: 'ui-tests/package-lock.json'

      - name: Install Apache JMeter
        run: |
          sudo apt-get update
          sudo apt-get install -y jmeter

      - name: Install Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
          tar -xzf allure-2.24.0.tgz
          sudo mv allure-2.24.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure

      - name: Install UI dependencies
        run: |
          cd ui-tests
          npm ci
          npx playwright install

      - name: Download mock-server JAR
        uses: actions/download-artifact@v4
        with:
          name: mock-server-jar
          path: mock-server/target

      - name: Start mock-server
        run: |
          echo "ðŸš€ Starting mock-server..."
          java -jar mock-server/target/mock-server-1.0-SNAPSHOT-jar-with-dependencies.jar start &
          echo $! > mock_pid
          sleep 3

      - name: Run Unit Tests
        run: echo "âœ… Unit tests passed"

      - name: Run Integration Tests
        run: |
          cd api-tests
          mvn clean test -D allure.results.directory=../test-results/Allure
          cd ..

      - name: Run Performance Tests
        run: |
          jmeter -n \
          -Dxstream.allowlist.enable=false \
          -t load-tests/fund-transfer-load.jmx \
          -l load-tests/results.jtl \
          -j load-tests/jmeter.log

      - name: Run E2E Tests
        run: |
          cd ui-tests
          npx playwright test
          cd ..

      - name: Stop mock-server
        if: always()
        run: |
          echo "ðŸ›‘ Stopping mock-server..."
          kill $(cat mock_pid) || true

      - name: Convert JMeter results to Allure format
        run: |
          mkdir -p test-results/Allure
          allure jmeter load-tests/results.jtl -o test-results/Allure

      - name: Load test report history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build test report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: test-results/Allure

      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [tests]
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Deploy application to Production
        run: echo "ðŸš€ Production deployment completed"
